        -:    0:Source:locality_fast.c
        -:    0:Graph:locality_fast.gcno
        -:    0:Data:locality_fast.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <time.h>
        -:    4:
        -:    5:#define SIZE 1000
        -:    6:
        -:    7://Was const double **, but that didn't work
        1:    8:void row_sums(double * sums, const double ** matrix, size_t nrs, size_t ncs){
     1001:    9:  for ( size_t ix=0; ix < nrs; ++ix ) {
     1000:   10:    double sum = 0;
  1001000:   11:    for ( size_t jx=0; jx < ncs; ++jx )
  1000000:   12:      sum += matrix[ix][jx];
     1000:   13:    sums[ix] = sum;
        -:   14:  }
        1:   15:}
        -:   16:
        -:   17://Was const double **, but that didn't work
        1:   18:void col_sums(double * sums, const double ** matrix, size_t nrs, size_t ncs){
     1001:   19:  for ( size_t jx=0; jx < ncs; ++jx ) {
     1000:   20:    double sum = 0;
  1001000:   21:    for ( size_t ix=0; ix < nrs; ++ix )
  1000000:   22:      sum += matrix[ix][jx];
     1000:   23:    sums[jx] = sum;
        -:   24:  }
        1:   25:}
        -:   26:
        -:   27://This should be faster as it accesses the memory linearly
        -:   28://We do however look up csums quite often, so maybe not
        1:   29:void rowcol_sums(double *rsums, double *csums, const double ** matrix, size_t nrs, size_t ncs){
        -:   30:	double current;
        1:   31:	double sum = 0;
     1001:   32:	for (size_t ix=0; ix<nrs; ++ix){
  1001000:   33:		for(size_t jx=0; jx<ncs; ++jx){
  1000000:   34:			current = matrix[ix][jx];
  1000000:   35:			sum += current;
  1000000:   36:			csums[jx] += current;
        -:   37:		}
     1000:   38:		rsums[ix]=sum;
     1000:   39:		sum=0;
        -:   40:	}
        1:   41:}
        -:   42:
        1:   43:void main(){
        -:   44:	struct timespec start,stop;
        -:   45:	long double elapsed;
        -:   46:	//fmatrix = flat matrix
        1:   47:	double * fmat = (double *)malloc(sizeof(double)*SIZE*SIZE);
        -:   48:	//Was
        -:   49:	//const double ** mat = (const double **)malloc(sizeof(double*)*SIZE);
        -:   50:	//But then I couldn't change the values
        1:   51:	const double ** mat = (const double **)malloc(sizeof(double*)*SIZE); //Kan inte ändra härifrån det som står på adressen. Så mat[i][j]=1 är ogiltigt. Men får ändra på pointern mat[i].
        -:   52:	//Är det samma för const double *** o. s. v. Alltså att mat[i], mat[j] kan ändras, men inte mat[i][j][k]?
        -:   53:			
        -:   54:	//Row major order, i. e.
        -:   55:	//a11 a12 a13 a21 a22 a23 a31 a32 a33
        -:   56:	//for SIZE=3
        -:   57:	
     1001:   58:	for (size_t i = 0, j=0; i<SIZE; ++i, j+=SIZE)
     1000:   59:		mat[i] = fmat + j;
        -:   60:	//Filling the matrix with ones, because why not?
  1000001:   61:	for (size_t k = 0; k<SIZE*SIZE; ++k)
  1000000:   62:		*(fmat+k)=1;
        -:   63:	
        1:   64:	double * sums = (double *)malloc(sizeof(double)*SIZE);
        1:   65:	double * sums2 = (double *)malloc(sizeof(double)*SIZE);
        -:   66:
        1:   67:	timespec_get(&start,TIME_UTC);
        1:   68:	row_sums(sums, mat, SIZE, SIZE);
        1:   69:	timespec_get(&stop,TIME_UTC);
        1:   70:	elapsed = (stop.tv_sec+1.0e-9*stop.tv_nsec)-(start.tv_sec+1.0e-9*start.tv_nsec);
        1:   71:	printf("%Lf10 secs for row sums.\n",elapsed);
        -:   72:	
        1:   73:	timespec_get(&start,TIME_UTC);
        1:   74:	col_sums(sums, mat, SIZE, SIZE);
        1:   75:	timespec_get(&stop,TIME_UTC);
        1:   76:	elapsed = (stop.tv_sec+1.0e-9*stop.tv_nsec)-(start.tv_sec+1.0e-9*start.tv_nsec);
        1:   77:	printf("%Lf10 secs for col sums.\n",elapsed);
        -:   78:	
        1:   79:	timespec_get(&start,TIME_UTC);
        1:   80:	rowcol_sums(sums, sums2, mat, SIZE, SIZE);
        1:   81:	timespec_get(&stop,TIME_UTC);
        1:   82:	elapsed = (stop.tv_sec+1.0e-9*stop.tv_nsec)-(start.tv_sec+1.0e-9*start.tv_nsec);
        1:   83:	printf("%Lf10 secs for row col sums.\n",elapsed);
        -:   84:	
        1:   85:	exit(0);
        -:   86:}	
