        -:    0:Source:locality_fast.c
        -:    0:Graph:locality_fast.gcno
        -:    0:Data:locality_fast.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <time.h>
        -:    4:
        -:    5:#define SIZE 1000
        -:    6:
        1:    7:void row_sums(double * sums, const double ** matrix, size_t nrs, size_t ncs){
     1001:    8:  for ( size_t ix=0; ix < nrs; ++ix ) {
     1000:    9:    double sum = 0;
  1001000:   10:    for ( size_t jx=0; jx < ncs; ++jx )
  1000000:   11:      sum += matrix[ix][jx];
     1000:   12:    sums[ix] = sum;
        -:   13:  }
        1:   14:}
        -:   15:
        1:   16:void col_sums(double * sums, const double ** matrix, size_t nrs, size_t ncs){
     1001:   17:  for ( size_t jx=0; jx < ncs; ++jx ) {
     1000:   18:    double sum = 0;
  1001000:   19:    for ( size_t ix=0; ix < nrs; ++ix )
  1000000:   20:      sum += matrix[ix][jx];
     1000:   21:    sums[jx] = sum;
        -:   22:  }
        1:   23:}
        -:   24:
        -:   25://This should be faster as it accesses the memory linearly
        -:   26://We do however look up csums quite often, so maybe not
        1:   27:void rowcol_sums(double *rsums, double *csums, const double ** matrix, size_t nrs, size_t ncs){
        -:   28:	double current;
        1:   29:	double sum = 0;
     1001:   30:	for (size_t ix=0; ix<nrs; ++ix){
  1001000:   31:		for(size_t jx=0; jx<ncs; ++jx){
  1000000:   32:			current = matrix[ix][jx];
  1000000:   33:			sum += current;
  1000000:   34:			csums[jx] += current;
        -:   35:		}
     1000:   36:		rsums[ix]=sum;
     1000:   37:		sum=0;
        -:   38:	}
        1:   39:}
        -:   40:
        1:   41:void main(){
        -:   42:	struct timespec start,stop;
        -:   43:	long double elapsed;
        -:   44:	//fmatrix = flat matrix
        1:   45:	double * fmat = (double *)malloc(sizeof(double)*SIZE*SIZE);	
        1:   46:	const double ** mat = (const double **)malloc(sizeof(double*)*SIZE); //Kan inte ändra härifrån det som står på adressen. Så mat[i][j]=1 är ogiltigt. Men får ändra på pointern mat[i].
        -:   47:	//Är det samma för const double *** o. s. v. Alltså att mat[i], mat[j] kan ändras, men inte mat[i][j][k]?
        -:   48:			
        -:   49:	//Row major order, i. e.
        -:   50:	//a11 a12 a13 a21 a22 a23 a31 a32 a33
        -:   51:	//for SIZE=3
        -:   52:	
     1001:   53:	for (size_t i = 0, j=0; i<SIZE; ++i, j+=SIZE)
     1000:   54:		mat[i] = fmat + j;
        -:   55:	//Filling the matrix with ones, because why not?
  1000001:   56:	for (size_t k = 0; k<SIZE*SIZE; ++k)
  1000000:   57:		*(fmat+k)=1;
        -:   58:	
        1:   59:	double * sums = (double *)malloc(sizeof(double)*SIZE);
        1:   60:	double * sums2 = (double *)malloc(sizeof(double)*SIZE);
        -:   61:
        1:   62:	timespec_get(&start,TIME_UTC);
        1:   63:	row_sums(sums, mat, SIZE, SIZE);
        1:   64:	timespec_get(&stop,TIME_UTC);
        1:   65:	elapsed = (stop.tv_sec+1.0e-9*stop.tv_nsec)-(start.tv_sec+1.0e-9*start.tv_nsec);
        1:   66:	printf("%Lf10 secs for row sums.\n",elapsed);
        -:   67:	
        1:   68:	timespec_get(&start,TIME_UTC);
        1:   69:	col_sums(sums, mat, SIZE, SIZE);
        1:   70:	timespec_get(&stop,TIME_UTC);
        1:   71:	elapsed = (stop.tv_sec+1.0e-9*stop.tv_nsec)-(start.tv_sec+1.0e-9*start.tv_nsec);
        1:   72:	printf("%Lf10 secs for col sums.\n",elapsed);
        -:   73:	
        1:   74:	timespec_get(&start,TIME_UTC);
        1:   75:	rowcol_sums(sums, sums2, mat, SIZE, SIZE);
        1:   76:	timespec_get(&stop,TIME_UTC);
        1:   77:	elapsed = (stop.tv_sec+1.0e-9*stop.tv_nsec)-(start.tv_sec+1.0e-9*start.tv_nsec);
        1:   78:	printf("%Lf10 secs for row col sums.\n",elapsed);
        -:   79:	
        1:   80:	exit(0);
        -:   81:}	
